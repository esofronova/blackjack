{"version":3,"sources":["data.js","components/Dealer.jsx","components/Bet.jsx","components/User.jsx","components/Buttons.jsx","components/GameOver.jsx","App.jsx","index.js"],"names":["values","Array","map","k","i","splice","suits","name","icon","cards","forEach","color","suit","value","push","cardsHidden","setCardsHidden","buttons","chips","Bet","className","bet","balance","chip","index","disabled","gameStarted","onClick","setBet","setBalance","Dealer","useState","dCards","dealerCards","length","dealerPoints","card","undefined","style","left","slice","User","uCards","userPoints","userCards","Buttons","btn","maxWidth","addCard","setGameStarted","document","querySelector","setAttribute","interval","setInterval","clearInterval","GameOver","winnerText","startNewGame","gameOver","setGameOver","winner","setWinner","setWinnerText","setDealerCards","setDealerPoints","setUserCards","setUserPoints","countPoints","arr","sum","player","Math","floor","random","getRandom","addToArr","Blackjack","title","setTimeout","Container","Row","Col","xs","lg","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7b6d09e4.chunk.js","sourcesContent":["const values = [...Array(10)].map((k = 1, i) => k + i);\r\n// remove \"5\"\r\nvalues.splice(4, 1);\r\n\r\nconst suits = [\r\n  {\r\n    name: 'spades',\r\n    icon: '♠'\r\n  },\r\n  {\r\n    name: 'hearts',\r\n    icon: '♥'\r\n  },\r\n  {\r\n    name: 'diamonds',\r\n    icon: '♦'\r\n  },\r\n  {\r\n    name: 'clubs',\r\n    icon: '♣'\r\n  }\r\n];\r\n\r\nconst colors = ['black', 'red'];\r\n\r\nexport const cards = [];\r\ncolors.forEach((color) => {\r\n  suits.forEach((suit) => {\r\n    values.forEach((value) => {\r\n      cards.push(\r\n        {\r\n          name: value === 1 ? 'ace' : value === 2 ? 'jack' : value === 3 ? 'queen' : value === 4 ? 'king' : value,\r\n          value: value,\r\n          suit: suit.name,\r\n          icon: suit.icon,\r\n          color: color\r\n        }\r\n      );\r\n    });\r\n  });\r\n});\r\n\r\n// console.log(cards);\r\n\r\n// function groupBy(data, val) {\r\n//   let group = [];\r\n//   data.forEach((item) => {\r\n//     if (!group[item[val]]) {\r\n//       group[item[val]] = [];\r\n//     }\r\n//     group[item[val]].push(item);\r\n//   });\r\n//   console.log(group);\r\n// };\r\n\r\n// groupBy(cards, ['suit']);\r\n\r\nexport const buttons = ['deal', 'hit', 'stand'];\r\nexport const chips = [5, 25, 50, 100];","import { useState } from \"react\";\r\nimport { dealerCards, dealerPoints } from \"../App\";\r\n\r\nexport let cardsHidden, setCardsHidden;\r\n\r\nexport default function Dealer() {\r\n\r\n  [cardsHidden, setCardsHidden] = useState(true);\r\n  let dCards = -50;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"mb-5\">\r\n        <h5 className=\"text-white text-center mb-3\">{`Dealer: ${cardsHidden ? (dealerCards.length > 0 ? dealerCards[0].value : 0) : dealerPoints}`}</h5>\r\n        <div className=\"d-flex\">\r\n          <div className=\"card me-3 position-static col-3\">\r\n            <div className=\"card-back\"></div>\r\n          </div>\r\n          <div className=\"d-flex cards col-9\">\r\n            {dealerCards.map((card, index) => {\r\n              dCards += 50;\r\n              return (\r\n                card !== undefined ?\r\n                <div\r\n                  key={index}\r\n                  className={\"card \" + (card.color === 'red' ? 'text-danger' : 'text-dark')}\r\n                  style={{ left: dCards + \"px\" }}\r\n                >\r\n                  {index === 0 || !cardsHidden ?\r\n                    <div className=\"card-front\">\r\n                      <div className=\"align-self-start\">{card.name.length > 1 ? card.name.slice(0, 1) : card.name}</div>\r\n                      <div className=\"align-self-center icon\">{card.icon}</div>\r\n                      <div className=\"align-self-end\">{card.name.length > 1 ? card.name.slice(0, 1) : card.name}</div>\r\n                    </div>\r\n                    :\r\n                    <div className=\"card-back\"></div>\r\n                  }\r\n                </div>\r\n                : null\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};","import { chips } from '../data';\r\nimport { bet, setBet, balance, setBalance, gameStarted } from '../App';\r\n\r\nexport default function Bet() {\r\n\r\n  return (\r\n    <>\r\n      <div className=\"h-100 d-flex flex-column justify-content-around py-3\">\r\n        <h2 className=\"mb-3\">Min bet is $25</h2>\r\n        <h2 className=\"mb-3\">Bet: {`$${bet}`}</h2>\r\n        <h2 className=\"mb-3\">Balance: {`$${balance}`}</h2>\r\n        <div className=\"d-flex justify-content-around gap-2 w-75 mx-auto\">\r\n          {chips.map((chip, index) => {\r\n            return (\r\n              <button\r\n                key={index}\r\n                disabled={gameStarted ? true : false}\r\n                className={\"btn rounded-circle p-1 text-white border border-dark chip \" + (chip === 5 ? \"btn-success\" : chip === 25 ? \"btn-primary\" : chip === 50 ? \"btn-warning\" : \"btn-danger\")}\r\n                onClick={() => {\r\n                  if (balance >= chip) {\r\n                    setBet(bet + chip);\r\n                    setBalance(balance - chip);\r\n                  };\r\n                }}\r\n              >{chip}</button>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};","import { userCards, userPoints } from \"../App\";\r\n\r\nexport default function User() {\r\n\r\n  let uCards = -50;\r\n\r\n  return (\r\n    <>\r\n      <h5 className=\"text-white text-center mb-3\">{`You: ${userPoints}`}</h5>\r\n      <div className=\"d-flex cards\">\r\n        {userCards.map((card, index) => {\r\n          uCards += 50;\r\n          return (\r\n            card !== undefined ?\r\n            <div\r\n              key={index}\r\n              className={\"card \" + (card.color === 'red' ? 'text-danger' : 'text-dark')}\r\n              style={{ left: uCards + \"px\" }}\r\n            >\r\n              <div className=\"card-front\">\r\n                <div className=\"align-self-start\">{card.name.length > 1 ? card.name.slice(0, 1) : card.name}</div>\r\n                <div className=\"align-self-center icon\">{card.icon}</div>\r\n                <div className=\"align-self-end\">{card.name.length > 1 ? card.name.slice(0, 1) : card.name}</div>\r\n              </div>\r\n            </div>\r\n            : null\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};","import { bet, gameStarted, setGameStarted, addCard, dealerPoints } from '../App';\r\nimport { buttons } from '../data';\r\nimport { setCardsHidden } from './Dealer';\r\n\r\nexport default function Buttons() {\r\n\r\n  return (\r\n    <>\r\n      <div className=\"btns h-100 centered\">\r\n        {buttons.map((btn, index) => {\r\n          return (\r\n            <button\r\n              key={index}\r\n              disabled={btn === 'deal' && bet >= 25 ? false : gameStarted ? false : true}\r\n              className={\"btn w-100 mb-3 text-uppercase btn-\" + (btn === 'deal' ? 'primary' : btn === 'hit' ? 'success' : 'danger') + (` btn-${btn}`)}\r\n              style={{ maxWidth: \"300px\" }}\r\n              onClick={() => {\r\n                if (btn === 'deal') {\r\n                  addCard('dealer');\r\n                  addCard('dealer');\r\n                  addCard('you');\r\n                  addCard('you');\r\n                  setGameStarted(true);\r\n                  document.querySelector('.btn-deal').setAttribute(\"disabled\", true);\r\n                };\r\n                if (btn === 'hit') {\r\n                  addCard('you');\r\n                };\r\n                if (btn === 'stand') {\r\n                  document.querySelector('.btn-hit').setAttribute(\"disabled\", true);\r\n                  document.querySelector('.btn-stand').setAttribute(\"disabled\", true);\r\n\r\n                  let interval = setInterval(() => {\r\n                    addCard('dealer');\r\n                    if (dealerPoints >= 17) {\r\n                      clearInterval(interval);\r\n                    };\r\n                  }, 1000);\r\n\r\n                  setCardsHidden(false);\r\n                };\r\n              }}\r\n            >{btn}</button>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};","import { winnerText, startNewGame } from \"../App\";\r\n\r\nexport default function GameOver() {\r\n\r\n  return (\r\n    <div className=\"overlay position-fixed centered w-100 h-100\">\r\n      <div className=\"fs-1 bg-white p-4 rounded\">\r\n        <h3 className=\"text-center w-75 mx-auto text-dark\">{winnerText}</h3>\r\n        <div className=\"centered mt-3\">\r\n          <button\r\n            className=\"btn btn-dark new-game\"\r\n            onClick={startNewGame}\r\n          >New Game</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};","import { cards } from './data';\r\nimport './style.scss';\r\nimport { useState } from 'react';\r\nimport Bet from './components/Bet';\r\nimport Dealer, { setCardsHidden } from './components/Dealer';\r\nimport User from './components/User';\r\nimport Buttons from './components/Buttons';\r\nimport GameOver from './components/GameOver';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\n// TODO\r\n// - splice cards from array\r\n\r\nexport let\r\n  bet, setBet, balance, setBalance, \r\n  gameStarted, setGameStarted, gameOver, setGameOver, winner, setWinner, winnerText, setWinnerText,\r\n  dealerCards, setDealerCards, dealerPoints, setDealerPoints,\r\n  userCards, setUserCards, userPoints, setUserPoints;\r\n\r\nconst getRandom = () => {\r\n  let rand = Math.floor(Math.random() * (cards.length + 1));\r\n  return rand\r\n};\r\n\r\nconst countPoints = arr => {\r\n  let sum = 0;\r\n  arr.forEach((card) => {\r\n    if (card !== undefined) {\r\n      sum += card.value;\r\n    };\r\n  });\r\n  return sum;\r\n};\r\n\r\nexport const addCard = player => {\r\n  addToArr();\r\n  function addToArr() {\r\n    let card = `${player}Card`;\r\n    card = getRandom();\r\n    if (player === 'you') {\r\n      userCards.push(cards[card]);\r\n      setUserCards([...userCards]);\r\n      setUserPoints(countPoints(userCards));\r\n    } else if (player === 'dealer') {\r\n      dealerCards.push(cards[card]);\r\n      setDealerCards([...dealerCards]);\r\n      setDealerPoints(countPoints(dealerCards));\r\n\r\n      // cards.splice(cards.indexOf(cards[dealerCard]), 1);\r\n    };\r\n  };\r\n};\r\n\r\nexport const startNewGame = () => {\r\n  if (winner === 'User') { \r\n    setBalance(balance + (bet * 2)); \r\n  } else if (winner === 'None') {\r\n    setBalance(balance + bet);\r\n  };\r\n  setGameOver(false);\r\n  setBet(0);\r\n  setDealerPoints(0);\r\n  setUserPoints(0);\r\n  setDealerCards([]);\r\n  setUserCards([]);\r\n  setGameStarted(false);\r\n  setCardsHidden(true);\r\n};\r\n\r\nexport default function Blackjack() {\r\n  document.title = \"Blackjack\";\r\n\r\n  [balance, setBalance] = useState(500);\r\n  [bet, setBet] = useState(0);\r\n\r\n  [gameStarted, setGameStarted] = useState(false);\r\n  [gameOver, setGameOver] = useState(false);\r\n  [winner, setWinner] = useState(null);\r\n  [winnerText, setWinnerText] = useState('');\r\n\r\n  [dealerCards, setDealerCards] = useState([]);\r\n  [userCards, setUserCards] = useState([]);\r\n\r\n  [dealerPoints, setDealerPoints] = useState(0);\r\n  [userPoints, setUserPoints] = useState(0);\r\n\r\n  let checkWinner = setTimeout(() => {\r\n    if ((userPoints === 21 || dealerPoints > 21) || (dealerPoints >= 17 && dealerPoints < 21 && userPoints > dealerPoints))  {\r\n      setGameOver(true);\r\n      setWinner('User');\r\n      setWinnerText(\"Congratulations! You're lucky today! :)\");\r\n    } else if ((dealerPoints === 21 || userPoints > 21) || (dealerPoints >= 17 && dealerPoints < 21 && userPoints < dealerPoints)) {\r\n      setGameOver(true);\r\n      setWinner('Dealer');\r\n      setWinnerText(\"Dealer is the winner! Maybe next time!..\")\r\n    } else if (userPoints > 17 && dealerPoints > 17 && userPoints === dealerPoints) {\r\n      setGameOver(true);\r\n      setWinner('None');\r\n      setWinnerText(\"Tie! ;)\");\r\n    };\r\n  }, 200);\r\n\r\n  return (\r\n    <div className=\"blackjack py-3 py-lg-5 h-100 overflow-auto\">\r\n      <Container className=\"h-100\">\r\n        <Row className=\"text-white text-center h-100\">\r\n          <Col xs={12} lg={4} className=\"mb-5 mb-lg-0\"><Bet /></Col>\r\n          <Col xs={12} lg={6} className=\"mb-5 mb-lg-0\">\r\n            <Row>\r\n              <Col xs={12}><Dealer /></Col>\r\n              <Col xs={12}><User /></Col>\r\n            </Row>\r\n          </Col>\r\n          <Col xs={12} lg={2}><Buttons /></Col>\r\n          { gameOver ? <GameOver /> : null }\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './classes.scss';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}